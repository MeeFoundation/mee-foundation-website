---
import Background from './Background.astro';

export interface Props {
}

const {  } = Astro.props;
const subtitles = [
	"there is an online power imbalance.",
	"you can’t control who has your data or how they’ll use it.",
	"data brokers and marketers are buying and selling information about you without your knowledge.",
	"businesses treat your data as their property.",
	"most users navigate this world with mistrust and fear."]
---

<article id="today" class="flex today flex-col items-center">
	{/* <img id="linesImage" class="lines animate-fadeIn" src="/images/lines.svg" /> */}
  <section class="relative z-20 flex flex-col items-center text-center w-full md:w-[692px]">
		<Background />
    <div id="title" class="title overflow-hidden fixed z-100 flex items-center justify-center h-screen pb-7">
			<div class="overflow-hidden">
				<h2 class="text text-base leading-5 font-bold tracking-wider uppercase text-purple animate-riseIn animation-delay-400">In today’s digital world...</h2>
			</div>
    </div>
		{subtitles.map((subtitle, index) => (
			<div id={`section-${index}`} class="section flex flex-col items-center section-0 overflow-hidden h-[200vh]">
				<div class="overflow-hidden fixed z-20 top-[50vh] w-full px-5 md:w-[692px]">
					<h2 class="text subtitle text-xl md:text-3xl font-bold text-white/[.85] hidden">{subtitle}</h2>
				</div>
			</div>
		))}
		<div class="scrollIconContainer fixed flex flex-col items-center justify-center h-screen pt-52 z-20 animate-fadeIn-long animation-delay-1000">
			<i class="scrollIcon flex relative w-4 h-6 md:w-4.5 md:h-7 py-1 md:py-2 transition-opacity ease-linear duration-100 overflow-hidden"/>
			<div class="down-arrow w-4 h-4 mt-1" />
		</div>
		<div id="bleachAnimation" class="flex h-[400vh]">
			<div id="animationTrigger" class="section flex flex-col items-center section-0 overflow-hidden h-screen"/>
		</div>
  </section>
</article>

<style>
	.text {
		-webkit-font-smoothing: antialiased;
		font-smoothing: antialiased;  
	}
	.logo {
		animation-duration: 800ms;
		opacity: 0;
	}
	.title {
		animation-duration: 300ms;
	}
	.subtitle {
		transition: opacity 300ms;
	}

	.titleBleach {
		animation-delay: calc(var(--bleachProgress) * 10 * -400ms);
		animation-play-state: paused;
		animation-fill-mode: both;
    backface-visibility: hidden; 
	}
	.figuresBleach {
		animation-delay: calc(var(--bleachProgress) * 2 * -1.5s);
		animation-play-state: paused;
		animation-fill-mode: both;
    backface-visibility: hidden; 
	}
	.down-arrow {
		background-color: #ffffffb3;
		mask: url(/images/bottom-arrow.svg) no-repeat center;
	}

</style>

<script>
	import { scrollIntoView } from "seamless-scroll-polyfill";
  const sections = document.querySelectorAll('.today .section');
	const scrollIconContainer = document.querySelector(".scrollIconContainer");
	const shadow = document.querySelector(".shadow");
	const title = document.getElementById("title");
	const figuresContainer = document.querySelector('.figuresContainer') as HTMLElement;
	const floatingFigures = document.querySelector('.floatingFigures');
	const grid = document.querySelector('.grid');
	const gradients = document.querySelectorAll('.floatGradient');
	const mainLogo = document.getElementById("mainLogo");
	const todaySection = document.getElementById("today");
	const envisionSection = document.getElementById("envision");
	const bleachSection = document.getElementById("bleachAnimation");
	let currBleach = 0
	const logoSection = document.getElementById("logoSection");
	let showTodatSectionTriggerScroll = 0
	const bleachSpeedMS = 100
	const bleachStep = 0.05
	let flashInProgress = false
	let scrollIconContainerHidden = false
	let changeScroll = 0
	const SUBTITLES_NUMBER = 5

	// autoscroll start
	const figures = document.querySelectorAll(".floatingFigures > div")
	let currentSectionId = 0
	let scrollToEnvisionIntervalId: number
	const autoscrollSpeedPx = 10
	const durationAutoscrollMs = 1000
	const stepTime = 10

  const smoothScroll = () => {
		const nextSectionId = currentSectionId + 1
		if (nextSectionId <= SUBTITLES_NUMBER - 1) {
			const element = document.getElementById(`section-${nextSectionId}`)
			const offsetTop = element?.offsetTop

			if (offsetTop) {

				document.getElementById(`section-${currentSectionId + 1}`)?.scrollIntoView({behavior: 'smooth'})


				currentSectionId ++
			}
		} else {
			figures.forEach(el => {
				const htmlEl = el as HTMLElement
				htmlEl.style.setProperty('animation-duration', '40s')
			})
			// final scroll to white section
			scrollToEnvisionIntervalId = setInterval(() => {
				window.scrollTo(0, window.scrollY + autoscrollSpeedPx);
			}, 1)
			clearInterval(autoscrollId)
		}
  }

	const START_AUTOSCROLL_AFTER_MS = 3000
	const AUTOSCROLL_SPEED_MS = 5000
	let timer: number | undefined = undefined;
	let autoscrollId: number
	let autoScrollOn = false
	handleAutoscroll()

	function autoScroll() {
		if (autoScrollOn) {
			smoothScroll()
		}
	}

	function handleAutoscroll() {
		if (autoScrollOn) {
			autoScrollOn = false
			clearInterval(autoscrollId)
		}

		if(timer !== null) {
			clearTimeout(timer);
		}
		timer = setTimeout(function() {
			if (!autoScrollOn) {
				autoScrollOn = true
				autoscrollId = setInterval(autoScroll, AUTOSCROLL_SPEED_MS)
			}

		}, START_AUTOSCROLL_AFTER_MS);
	}

	function clearListeners() {
		if (currBleach >= 1) {
			clearTimeout(timer);
			clearInterval(scrollToEnvisionIntervalId)
			window.removeEventListener('wheel', handleAutoscroll)
			window.removeEventListener('keypress', handleAutoscroll)
			window.removeEventListener('scroll', clearListeners)
			figures.forEach(el => {
				const htmlEl = el as HTMLElement
				htmlEl.style.setProperty('animation-duration', '120s')
			})
		}
	}

	window.addEventListener('scroll', clearListeners);
	window.addEventListener('wheel', handleAutoscroll);
	window.addEventListener('keypress', handleAutoscroll);
	// autoscroll end

		const options: IntersectionObserverInit = {
			// root: document.body,
			threshold: 0.1,
			rootMargin: "-99% 0% 0%"
		};
		const observer = new IntersectionObserver((entries, _) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					if(entry.target.id === "animationTrigger" && currBleach <= 0) {
						title?.classList.add("animate-fadeOut", "titleBleach");
						entry.target.querySelector('.subtitle')?.classList.add("animate-fadeOut", "titleBleach");
						grid?.classList.add("animate-fadeOut", "figuresBleach");
						figuresContainer?.classList.add("animate-collapse3d", "figuresBleach");
						gradients.forEach(gradient => {
							gradient.removeAttribute('style');
							gradient.classList.add("animate-fadeOut", "figuresBleach")
						})
						shadow?.classList.add("bg-1");
						showTodatSectionTriggerScroll = window.scrollY

						if (!flashInProgress) {
							flashInProgress = true
							changeScroll = window.scrollY
							let bleachIntervalId = setInterval(() => {
								if (currBleach < 1) {
									currBleach = currBleach + bleachStep
									document.documentElement.style.setProperty('--bleachProgress', currBleach.toString());
								} else {
									setTimeout(() => {
										window.scrollTo(0, changeScroll + window.innerHeight + 2000);
										flashInProgress = false
									}, 1000)
									clearInterval(bleachIntervalId)

									envisionSection?.classList.remove("hidden");
									mainLogo?.classList.add("logo--contrast");

									logoSection?.classList.remove("opacity-0");
								}
							}, bleachSpeedMS)
						}
					}

					if(entry.target.id === "animationTrigger" && currBleach > 0) {
						envisionSection?.classList.add("hidden");
						mainLogo?.classList.remove("logo--contrast");
						logoSection?.classList.add("opacity-0");

						if (!flashInProgress) {
							flashInProgress = true

							let bleachIntervalId = setInterval(() => {
								if (currBleach > 0) {
									currBleach = currBleach - bleachStep
									document.documentElement.style.setProperty('--bleachProgress', currBleach.toString());
								} else {
									setTimeout(() => {
										flashInProgress = false
										const lastSection = document.getElementById("section-4");
										if (lastSection) {
											scrollIntoView(lastSection)
										}
									}, 1000)
									clearInterval(bleachIntervalId)
									showTodatSectionTriggerScroll = 0
								}
							}, bleachSpeedMS)
						}
					}

					currentSectionId = Number(entry.target.id.slice(-1))
					entry.target.querySelectorAll(".subtitle").forEach(subtitle => {subtitle.classList.remove('animate-fadeOut','hidden')});
					entry.target.querySelectorAll(".subtitle").forEach(subtitle => {subtitle.classList.add('animate-riseIn')});
				} else {
					entry.target.querySelectorAll(".subtitle").forEach(subtitle => {subtitle.classList.remove('animate-riseIn')});
					entry.target.querySelectorAll(".subtitle").forEach(subtitle => {subtitle.classList.add('animate-fadeOut')});
				}
			})
		}, options);

		sections.forEach((section) => {
			observer.observe(section)
		});

		document.addEventListener('scroll', () => {
			if (!flashInProgress) {
				requestAnimationFrame(storeScroll)
			}

			if(bleachSection) {
				if(currBleach === 0) {
					envisionSection?.classList.add("hidden");
					mainLogo?.classList.remove("logo--contrast");
				}
			}

			if(!scrollIconContainerHidden && window.scrollY > 400) {
				scrollIconContainer?.classList.add("opacity-0");
				scrollIconContainerHidden = true
				setTimeout(()=>{
					scrollIconContainer?.classList.add("hidden");
				},400)
			}
		}, {passive: true})

	const storeScroll = () => {
		document.documentElement.style.setProperty('--scroll',
		(window.scrollY /
		(document.body.offsetHeight - window.innerHeight)).toString())
	};
	// outdated
	const calcElScroll = (element:Element | HTMLElement) => {
		const rect = element.getBoundingClientRect();
		if(rect.top - window.innerHeight > 0) return 0;
		if((rect.bottom - window.innerHeight) < 0) return 1;
		return (Math.abs(rect.top - window.innerHeight)) / rect.height; 
	}

	function scrollToEnvision() {
		currBleach = 1
		document.documentElement.style.setProperty('--bleachProgress', '1');
		const todaySection = document.getElementById("today");
		const envisionSection = document.getElementById("envision");
		title?.classList.add("animate-fadeOut", "titleBleach");
		shadow?.classList.add("bg-1");
		envisionSection?.classList.remove("hidden");
		window.scrollTo(0, document.body.scrollHeight);
	}

	const srollToEnd = document.getElementById("sroll-to-end");
	srollToEnd?.addEventListener("click", scrollToEnvision);
</script>
