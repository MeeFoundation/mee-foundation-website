---
import Background from './Background.astro';

export interface Props {}

const {} = Astro.props;
const subtitles = [
  'you can’t control who has your data or how they’ll use it.',
  'businesses treat your data as their property.',
  'data brokers buy and sell information about you without your knowledge',
  'most people navigate this world with mistrust.',
];
---

<div class="slider-container">
  <Background />
  <div
    id="title"
    class="title fixed z-100 flex h-screen w-full items-center justify-center overflow-hidden pb-7"
  >
    <div class="overflow-hidden">
      <h2
        class="text animate-riseIn text-base font-bold uppercase leading-5 tracking-wider text-purple animation-delay-400"
      >
        In today’s digital world...
      </h2>
    </div>
  </div>
  {
    subtitles.map((subtitle, index) => (
      <div class={`slide slide${index}`}>
        <div class="slide-part">
          <div class="absolute top-0 flex h-full w-[100vw] items-center justify-center overflow-hidden">
            <div class="slide-content">
              <p class="slide-subtitle px-5 text-xl opacity-0 md:w-[692px] md:text-3xl">
                {subtitle}
              </p>
            </div>
          </div>
        </div>
      </div>
    ))
  }
  <div
    class="scrollIconContainer fixed z-20 flex h-screen w-screen animate-fadeIn-long flex-col items-center justify-center pt-56 animation-delay-1000"
  >
    <i
      class="scrollIcon relative flex h-6 w-4 overflow-hidden py-1 transition-opacity duration-100 ease-linear md:h-7 md:w-4.5 md:py-2"
    ></i>
    <div class="down-arrow mt-1 h-4 w-4"></div>
  </div>
  <div
    id="animationTrigger"
    class="section section-0 flex h-screen w-[10px] flex-col items-center overflow-hidden"
  >
  </div>
  <div id="bleachAnimation" class="fixed flex h-[400vh]"></div>
</div>

<style>
  .slider-container {
    position: relative;
    height: 100vh;
    min-width: 320px;
    overflow: hidden;
  }

  .slide-part {
    position: absolute;
    top: 0;
    height: 100vh;
    transition: transform 1s;
    transform: translateY(100%);
    transition: transform 1s;
  }
  .slide-part .active {
    transform: translateY(0);
  }

  .scrolling_active .slide-part {
    transform: translateX(0) translateY(0) translateZ(0);
  }

  .slide-content {
    position: absolute;
    display: flex;
    justify-content: start;
    align-items: center;
    flex-direction: column;
    top: 50%;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    color: #ffffff;
    font-size: 3vh;
    text-align: center;
  }

  .slide-title {
    font-size: 6vh;
    text-transform: uppercase;
    margin-bottom: 1rem;
  }

  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background: transparent;
  }
  .down-arrow {
    background-color: #ffffffb3;
    mask: url(/images/bottom-arrow.svg) no-repeat center;
  }
</style>
<style is:global>
  @media (max-height: 800px) {
    .sectionTitle {
      top: -20vh !important;
    }

    .sectionText {
      top: 30vh !important;
    }
  }
</style>

<script>
  const fromEnvision = window.location.hash === '#from-envision';
  const sliderContainer = document.querySelector('.slider-container');
  const slides = document.querySelectorAll('.slide');
  const subtitles = document.querySelectorAll('.slide-subtitle');
  const scrollIconContainer = document.querySelector('.scrollIconContainer');
  let activeSlideIndex = 0;
  let scrollCount = 0;
  let countForScroll = 0;
  let flashInProgress = false;

  sliderContainer?.classList.add('slider-locked');

  let currBleach = 0;
  const grid = document.querySelector('.grid');
  const figuresContainer = document.querySelector(
    '.figuresContainer',
  ) as HTMLElement;
  const gradients = document.querySelectorAll('.floatGradient');
  const shadow = document.querySelector('.shadow');
  const title = document.getElementById('title');
  const bleachSpeedMS = 70;
  const bleachStep = 0.02;
  const bleachStepDouble = 0.04;
  const START_AUTOSCROLL_AFTER_MS = 3000;
  const AUTOSCROLL_SPEED_MS = 5000;
  let timer: number | undefined = undefined;
  let autoscrollId: number;
  let autoScrollOn = false;

  const autoScroll = () => {
    if (autoScrollOn) {
      moveToSlide(1);
    }
  };
  const stopAutoScroll = () => {
    if (autoScrollOn) {
      autoScrollOn = false;
      autoscrollId && clearInterval(autoscrollId);
    }
  };

  const handleAutoscroll = () => {
    if (autoScrollOn) {
      autoScrollOn = false;
      clearInterval(autoscrollId);
    }

    if (timer !== null) {
      clearTimeout(timer);
    }

    timer = setTimeout(function () {
      if (!autoScrollOn) {
        autoScrollOn = true;
        autoscrollId = setInterval(autoScroll, AUTOSCROLL_SPEED_MS);
      }
    }, START_AUTOSCROLL_AFTER_MS);
  };

  const onDragEndAnimation = (swap: number, activeSlide: number) => {
    let iterationCount = 0;

    let dragAnimationId = setInterval(() => {
      if (iterationCount < 100 && !(!activeSlide && swap === -1)) {
        iterationCount++;
        scrollCount = scrollCount + swap * 0.0001 * (99 - iterationCount);
        document.documentElement.style.setProperty(
          '--scroll',
          scrollCount.toString(),
        );
      } else {
        clearInterval(dragAnimationId);
      }
    }, 7);
  };

  const startBleachAnimation = () => {
    flashInProgress = true;
    title?.classList.add('animate-fadeOut', 'titleBleach');
    subtitles.forEach((subtitle) => {
      subtitle.classList.add('animate-fadeOut', 'titleBleach');
    });
    grid?.classList.add('animate-fadeOut', 'figuresBleach');
    figuresContainer?.classList.add('animate-collapse3d', 'figuresBleach');
    gradients.forEach((gradient) => {
      gradient.removeAttribute('style');
      gradient.classList.add('animate-fadeOut', 'figuresBleach');
    });
    shadow?.classList.add('bg-1');

    let bleachIntervalId = setInterval(() => {
      if (currBleach < 1) {
        const step = currBleach > 0.6 ? bleachStepDouble : bleachStep;
        currBleach = currBleach + step;
        if (currBleach > 1) {
          currBleach = 1;
        }
        document.documentElement.style.setProperty(
          '--bleachProgress',
          currBleach.toString(),
        );
      } else {
        setTimeout(() => {
          flashInProgress = false;
          window.location.href = '/envision';
        }, 1000);
        clearInterval(bleachIntervalId);
      }
    }, bleachSpeedMS);
  };
  const startBleachFromEndAnimation = () => {
    flashInProgress = true;
    title?.classList.add('opacity-0');
    grid?.classList.add('animate-fadeIn', 'figuresBleach');
    figuresContainer?.classList.add('animate-collapse3d', 'figuresBleach');
    gradients.forEach((gradient) => {
      gradient.removeAttribute('style');
      gradient.classList.add('animate-fadeIn', 'figuresBleach');
    });
    shadow?.classList.add('bg-1');

    let bleachIntervalId = setInterval(() => {
      if (currBleach > 0) {
        const step = currBleach > 0.6 ? bleachStepDouble : bleachStep;
        currBleach = currBleach - step;
        if (currBleach < 0) {
          currBleach = 0;
        }

        document.documentElement.style.setProperty(
          '--bleachProgress',
          currBleach.toString(),
        );
      } else {
        flashInProgress = false;
        title?.classList.add('animate-fadeIn');
        title?.classList.remove('opacity-0');
        setActiveSlide();
        clearInterval(bleachIntervalId);
      }
    }, bleachSpeedMS);
  };

  const setActiveSlide = () => {
    slides.forEach((slide, index) => {
      const isActive = index === activeSlideIndex;
      const subtitle = slide.querySelector('.slide-subtitle');

      if (slide.classList.contains('scrolling_active')) {
        subtitle?.classList.add('animate-fadeOut', 'opacity-0');
        subtitle?.classList.remove('animate-riseIn');
      } else if (isActive) {
        subtitle?.classList.remove('opacity-0', 'animate-fadeOut');
        subtitle?.classList.add('animate-riseIn');
      }

      setTimeout(() => {
        slide.classList.toggle('scrolling_active', isActive);
      }, 300);
    });
  };

  const moveToSlide = (swap: number) => {
    if (sliderContainer?.classList.contains('slider-locked') || flashInProgress)
      return;

    onDragEndAnimation(swap, activeSlideIndex);

    const potentialNextSlide = activeSlideIndex + swap;

    if (activeSlideIndex === 0 && swap === 1) {
      scrollIconContainer?.classList.add('opacity-0');
      setTimeout(() => {
        scrollIconContainer?.classList.add('hidden');
      }, 100);
    }

    if (potentialNextSlide < 0 && swap === -1) {
      return;
    }

    activeSlideIndex = potentialNextSlide;

    sliderContainer?.classList.add('slider-locked');
    setActiveSlide();

    if (potentialNextSlide > slides.length - 1 && swap === 1) {
      startBleachAnimation();
      return;
    }
  };

  const onTransitionEnd = () => {
    sliderContainer?.classList.remove('slider-locked');
  };

  const onScroll = (event: WheelEvent) => {
    stopAutoScroll();
    const swap = Math.sign(event.deltaY);
    const locked = sliderContainer?.classList.contains('slider-locked');

    if (!(activeSlideIndex === 0 && event.deltaY < 0) && !locked) {
      scrollCount = scrollCount + event.deltaY * 0.0001;

      document.documentElement.style.setProperty(
        '--scroll',
        scrollCount.toString(),
      );
    }

    countForScroll = countForScroll + event.deltaY;

    if (countForScroll > 1000 || countForScroll < -1000) {
      moveToSlide(swap);
      countForScroll = 0;
    }
  };

  let startY = 0;
  let endY = 0;

  const onDragStart = (event: TouchEvent) => {
    stopAutoScroll();
    startY = event.touches[0]?.clientY ?? 0;
  };

  const onDragMove = (event: TouchEvent) => {
    endY = event.touches[0]?.clientY ?? 0;
    const changeScroll = startY - endY;

    if (!(!activeSlideIndex && changeScroll < 0)) {
      scrollCount = scrollCount + changeScroll * 0.00005;
      if (scrollCount < 0) {
        scrollCount = 0;
      }

      document.documentElement.style.setProperty(
        '--scroll',
        scrollCount.toString(),
      );
    }
  };

  const onDragEnd = () => {
    const swap = startY > endY ? 1 : -1;
    moveToSlide(swap);
  };

  document.addEventListener('wheel', onScroll);
  sliderContainer?.addEventListener('transitionend', onTransitionEnd);

  document.body.onkeydown = function (e) {
    if (e.code === 'ArrowDown') {
      stopAutoScroll();
      moveToSlide(1);
    }

    if (e.code === 'ArrowUp') {
      stopAutoScroll();
      moveToSlide(-1);
    }
  };

  document?.addEventListener('touchstart', onDragStart);
  document?.addEventListener('touchmove', onDragMove);
  document?.addEventListener('touchend', onDragEnd);

  if (fromEnvision) {
    window.history.replaceState(null, document.title, '/');
    activeSlideIndex = slides.length - 1;
    scrollCount = 2;
    document.documentElement.style.setProperty(
      '--scroll',
      scrollCount.toString(),
    );
    scrollIconContainer?.classList.add('hidden');
    currBleach = 1;
    startBleachFromEndAnimation();
  } else {
    setActiveSlide();
    handleAutoscroll();
  }
</script>
