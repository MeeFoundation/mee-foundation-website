---
export interface Props {
  title: string;
}

const {title} = Astro.props;

import '@styles/base.css';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <meta name="theme-color" content="#ffffff" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />

    <meta
      name="description"
      content="The Mee Foundation is a nonprofit whose mission is to develop a human-centered user experience for the internet."
    />
    <meta
      property="og:title"
      content="A human-centered user experience for the internet"
    />
    <meta
      property="og:description"
      content="The Mee Foundation is a nonprofit whose mission is to develop a human-centered user experience for the internet."
    />
    <meta
      property="og:image"
      content="https://mee.foundation/mee_fav_icon.svg"
    />
    <meta
      property="twitter:title"
      content="A human-centered user experience for the internet"
    />
    <meta
      property="twitter:description"
      content="The Mee Foundation is a nonprofit whose mission is to develop a human-centered user experience for the internet"
    />
    <meta
      property="twitter:image"
      content="https://mee.foundation/mee_fav_icon.svg"
    />

    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>

  {
    (
      <div
        id="connectionErrAlert"
        class="toast toast-end toast-top z-100 mt-16 hidden"
      >
        <div class="alert alert-error">
          <span>Connection attempt was unsuccessful</span>
        </div>
      </div>
    )
  }
</html>

<style is:global>
  :root {
  }
  html {
    background-color: #f6f6f6;
    -ms-overflow-style: none;
    scrollbar-width: none;
    --scroll: 0;
    --bleachProgress: 0;
    --bg-offset: 0vh;
    transition: left 1s;
  }
  html::-webkit-scrollbar {
    display: none;
  }

  strong {
    font-weight: 800;
  }
  code {
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
  }
  .marker > mark {
    position: relative;
    background: none;
    color: inherit;
  }
  .marker > mark::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 10%;
    height: 0.15em;
    border-radius: 2px;
    background-color: #f9df89;
    z-index: -1;
    animation: drawUnderline 200ms both;
    animation-delay: 800ms;
  }

  .scrollContainer {
    position: fixed;
    top: 0;
    left: 0;
    overflow: hidden;
    height: inherit;
  }

  .pause {
    animation-play-state: paused;
  }

  .play {
    animation-play-state: running;
  }

  @keyframes drawUnderline {
    0% {
      width: 0%;
    }
    100% {
      width: 100%;
    }
  }

  .scrollIcon {
    border: 2px solid rgba(255, 255, 255, 0.7);
    border-radius: 12px;
  }
  .scrollIcon::after {
    position: relative;
    left: calc(50% - 1px);
    width: 2px;
    height: 50%;
    background: rgba(255, 255, 255, 0.7);
    border-radius: 1px;
    content: '';
    align-self: flex-start;
    animation-name: scroll;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-delay: 2s;
  }
  @keyframes scroll {
    0% {
      opacity: 1;
      height: 50%;
    }
    20% {
      opacity: 1;
      height: 50%;
    }
    30% {
      height: 100%;
      align-self: flex-start;
    }
    40% {
      opacity: 1;
      align-self: flex-end;
    }
    80% {
      opacity: 0;
      height: 0%;
      align-self: flex-end;
    }
    81% {
      opacity: 0;
      height: 50%;
      align-self: flex-start;
    }
    100% {
      opacity: 1;
      height: 50%;
    }
  }

  .logo > svg {
    fill: white;
    transition: all;
    /* transition-delay: 2.9s; */
    transition-duration: 200ms;
    transition-timing-function: linear;
  }
  .logo--contrast > svg {
    fill: #447f88;
  }

  .progress-container {
    width: 100%;
    display: flex;
  }

  .progress-bar {
    height: 4px;
    background: #559faa;
    width: 0%;
    border-radius: 12px;
  }
</style>

<script>
  import {sdkInit} from '../sdkInit';
  const SHOW_ERR_ALERT_FOR_MS = 3000;

  const scrollWrap = document.querySelector('.scrollContainer') as HTMLElement,
    speed = 0.1;

  if (scrollWrap) {
    const setHeight = () => {
      scrollWrap.style.position = 'relative';
      document.body.style.height = 'auto';
      const containerHeight = scrollWrap.scrollHeight;
      const height =
        containerHeight < window.innerHeight
          ? window.innerHeight - 1
          : containerHeight - 1;
      document.body.style.height = Math.floor(height) + 'px';
      scrollWrap.style.position = 'fixed';
    };

    setHeight();

    document.fonts.ready.then(function () {
      setHeight();
    });

    window.addEventListener('resize', function () {
      setHeight();
      updateScrollIndicator();
    });

    const showPrinciples = document.getElementById('show-principles');
    showPrinciples?.addEventListener('click', () => {
      setTimeout(() => {
        setHeight();
        updateScrollIndicator();
      }, 100);
    });
  }

  let offset = 0;

  const smoothScroll = () => {
    offset += Math.floor((window.scrollY - offset) * speed);
    const scroll = 'translateY(-' + offset + 'px)';
    scrollWrap.style.transform = scroll;
    requestAnimationFrame(smoothScroll);
  };

  if (scrollWrap) requestAnimationFrame(smoothScroll);

  const connectionErrAlert = document.getElementById('connectionErrAlert');
  const errorConnectCb = () => {
    if (connectionErrAlert) {
      connectionErrAlert.classList.remove('hidden');
    }

    setTimeout(() => {
      if (connectionErrAlert) {
        connectionErrAlert.classList.add('hidden');
      }
    }, SHOW_ERR_ALERT_FOR_MS);
  };

  sdkInit(errorConnectCb);

  // outdated with new indicators
  window.addEventListener('scroll', updateScrollIndicator);
  const todaySection = document.getElementById('today');
  const envisionSection = document.getElementById('envision');

  function updateScrollIndicator() {
    if (todaySection || envisionSection) return;

    const scrollIndicator = document.getElementById('scroll-indicator');

    if (scrollIndicator) {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      let height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;

      const percent = (winScroll / height) * 100;

      scrollIndicator.style.width = percent + '%';
    }
  }
</script>
