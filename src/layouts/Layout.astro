---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="theme-color" content="#ffffff">
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>

<style is:global>
	:root {
		
	}
	html {
		background-color: #F6F6F6;
		-ms-overflow-style: none; 
    scrollbar-width: none; 
		--scroll: 0;
		--bleachProgress: 0;
		--scaleFactor: 1;
		transition: left 1s;
	}
	html::-webkit-scrollbar { 
    display: none;
	}

	strong {
		font-weight: 800;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}
	.marker > mark {
    position: relative;
    background: none;
    color: inherit;
  }
  .marker > mark::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: 3px;
    height: 6px;
    border-radius: 2px;
    background-color: #F9DF89;
    z-index: -1;
		animation: drawUnderline 200ms both;
		animation-delay: 800ms;
  }

	@media (min-width: 768px) {
		.marker > mark::after {
    	height: 9px;
  	}
	}
	.scrollContainer {
    position: fixed;
    top: 0;
    left: 0;
    overflow: hidden;
  }
	.animation-delay-200 {
		animation-delay: 200ms;
	}
	.animation-delay-400 {
		animation-delay: 400ms;
	}
	.animation-delay-800 {
		animation-delay: 800ms;
	}
	.animation-delay-1000 {
		animation-delay: 1s;
	}
	.animation-delay-1200 {
		animation-delay: 1.2s;
	}
	.animation-delay-1400 {
		animation-delay: 1.4s;
	}
	.animation-delay-1600 {
		animation-delay: 1.6s;
	}
	.animation-delay-1800 {
		animation-delay: 1.8s;
	}
	.animation-delay-2000 {
		animation-delay: 2s;
	}
	.animation-delay-2200 {
		animation-delay: 2.2s;
	}
	.pause {
     animation-play-state: paused;
   }

	 .play {
		animation-play-state: running;
	 }

	@keyframes drawUnderline {
  	0% { width: 0% }
    100% { width: 100% }
  }
</style>

<script>
	const scrollWrap = document.querySelector(".scrollContainer") as HTMLElement;
  const scrollSections = document.querySelectorAll('.scrollSection');
  let speed = 0.1;
	let scrollOffset = 0;

	const scrollObserver = new IntersectionObserver((entries, _) => {
		entries.forEach((entry) => {
      if (entry.isIntersecting) {
        // slow down scroll speed on each section
        speed = 0.04;
        // return scroll to default after few ms
        setTimeout(() => {speed = 0.1}, 400)
			}
		})
	});

	scrollSections.forEach(section => scrollObserver.observe(section));

	const smoothScroll = () => {
    scrollOffset += Math.ceil((window.scrollY - scrollOffset) * speed);
    const scroll = "translateY(-" + scrollOffset + "px)";
    scrollWrap.style.transform = scroll;
    requestAnimationFrame(smoothScroll);
  }
	
	if(scrollWrap) {
		const height = scrollWrap.getBoundingClientRect().height - 1;
		document.body.style.height = Math.floor(height) + "px";
		requestAnimationFrame(smoothScroll);
	}
</script>