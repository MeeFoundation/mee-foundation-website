---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import TodaySection from '../components/TodaySection.astro';
import EnvisionSection from '../components/EnvisionSection.astro';

// FIXME Lagging with grid by css
// TODO Add snap scrolling, or smooth scroll with pauses on blocks
// TODO Add smooth scroll to all pages
// TODO Make howto page
---

<Layout title="Mee Foundation">
	<Header backgroundColor="bg-transparent"/>
	<main class="overflow-x-visible bg-white">
		<div id="animation-control" class="white transition-opacity ease-in-out duration-500 fixed bottom-5 sm:bottom-12 left-5 sm:left-15 w-[calc(100%-40px)] sm:w-[calc(100%-120px)] z-999" >
			<div class="flex sm:flex-row justify-between flex-col gap-6 sm:gap-0 items-center sm:items-start">
				<div class="cursor-pointer sm:mt-[-7px] sm:mr-4">
					<button id="animation-play-pause-btn" class="play">
						<div id="play-icon" class="h-5 w-5"/>
						<div id="pause-icon" class="h-5 w-5"/>
					</button>
				</div>

				<div class="w-full cursor-pointer">
					<div
						class="progress-nav-bar w-full flex flex-row justify-between gap-1 sm:gap-[2px]"
						id="scroll-nav-bar"
					/>
				</div>

				<div class="cursor-pointer sm:mt-[-17px] sm:ml-4">
					<div id="sroll-to-end" class="w-fit whitespace-nowrap uppercase flex items-center py-2 px-4 text-sm text-white border border-white white rounded-full">
						<div id="sroll-to-end-arrow" class="h-4 w-4 mr-1"/>
						Get the App
					</div>
				</div>
			</div>
		</div>

		<TodaySection />
		<div id="middle-element"/>
		<EnvisionSection />
		<div id="end-element"/>
	</main>
</Layout>

<script>
	import scrollIntoView from 'scroll-into-view-if-needed'

	window.onbeforeunload = function () {
		window.scrollTo(0, 0);
	}
	const todayBitsNumber = 5
	const envBitsNumber = 6

	const toPref = 'today'
	const enPref = 'env'
	const navBar = document.getElementById("scroll-nav-bar");
	let currSection = 'today'
	let currIndex = 0

	const getPrefixName = (name: string) => {
		if (name === 'today') {
			return 'section'
		} else {
			return 'en-section'
		}
	}

	const goToSection = (section: string, index: number) => {
		syncStatusBar(getPrefixName(section), index)

		if (currSection === section) {
			scrollToSection(getPrefixName(section), index)
		} else {
			currSection = section
			const eventName = section === 'today'
				? "scrollToToday"
				: "scrollToEnv"

			const event = new CustomEvent(eventName, {detail: index})
			window.dispatchEvent(event)

			setTimeout(() => scrollToSection(getPrefixName(section), index), 1000)
		}
	}

	document.body.onkeydown = function(e){
		if (e.code === 'ArrowLeft') {
			if (currSection === 'env' && currIndex === 0) {
				goToSection('today', todayBitsNumber - 1)
			} else if (currIndex > 0) {
				goToSection(currSection, currIndex - 1)
			}
		}

		if (e.code === 'ArrowRight') {
			if (currSection === 'today' && currIndex === todayBitsNumber - 1) {
				goToSection('env', 0)
			} else if ((currIndex < todayBitsNumber - 1 && currSection === 'today')
				|| (currIndex < envBitsNumber - 1 && currSection === 'env')) {
				goToSection(currSection, currIndex + 1)
			}
		}
	};

	for (let index = 0; index < todayBitsNumber; index++) {
		const bitProgress = document.createElement("div");
		bitProgress.id = `${toPref}-bit-progress-${index}`
		bitProgress.className = 'bit-progress absolute top-0 left-0 h-6 sm:h-[6px]'

		const bit = document.createElement("div");
		bit.id = `${toPref}-bit-${index}`
		bit.className = 'bit overflow-hidden relative w-full first:rounded-l-full last:rounded-r-full nav-bar-bit h-6 sm:h-[6px]'
		bit.append(bitProgress)
		navBar && navBar.append(bit)
		const el = document.getElementById(`${toPref}-bit-${index}`);
		el && el.addEventListener('click', () => {
			goToSection('today', index)
		})
	}

	for (let index = 0; index < envBitsNumber; index++) {
		const bitProgress = document.createElement("div");
		bitProgress.id = `${enPref}-bit-progress-${index}`
		bitProgress.className = 'bit-progress absolute top-0 left-0 h-6 sm:h-[6px]'

		const bit = document.createElement("div");
		bit.id = `${enPref}-bit-${index}`
		bit.className = 'bit overflow-hidden relative w-full first:rounded-l-full last:rounded-r-full nav-bar-bit h-6 sm:h-[6px]'
		bit.append(bitProgress)
		navBar && navBar.append(bit)
		const el = document.getElementById(`${enPref}-bit-${index}`);
		el && el.addEventListener('click', () => {
			goToSection('env', index)
		})
	}

	export const scrollToSection = (idPrefix: string, index: number) => {
		const element = document.getElementById(`${idPrefix}-${index}`)
		currIndex = index

		element && scrollIntoView(element, {
			behavior: (actions) =>
				actions.forEach(({ el, top, left }) => {
					const _top = (idPrefix === 'section' && index === 0)
						? top - (screen.height / 2)
						: top
					el.scrollTop = _top
					el.scrollLeft = left
				}),
		})

		const event = new CustomEvent("scrolledTo", {detail: {
			section: idPrefix,
			index: index
		}})
		window.dispatchEvent(event)
	}

	window.addEventListener('onCurrentIndexChanged', (e) => {
		console.log('list', e.detail);
		currIndex = e.detail
	})

	window.addEventListener('needSyncStatusBar', (e) => {
		const params = e.detail
		syncStatusBar(params.section, params.index)
	})

	const syncStatusBar = (idPrefix: string, tgIndex: number) => {
		setTimeout(() => {
			for (let index = 0; index < todayBitsNumber; index++) {
				const bitProgress = document.getElementById(`today-bit-progress-${index}`);

				if (bitProgress) {
					if (idPrefix === 'section') {
						if (tgIndex <= index) {
							bitProgress.style.width = '0%';
						} else {
							bitProgress.style.width = '100%';
						}
					} else {
						bitProgress.style.width = '100%';
					}
				}
			}

			for (let index = 0; index < envBitsNumber; index++) {
				const bitProgress = document.getElementById(`env-bit-progress-${index}`);

				if (bitProgress) {
					if (idPrefix === 'en-section') {
						if (tgIndex <= index) {
							bitProgress.style.width = '0%';
						} else {
							bitProgress.style.width = '100%';
						}
					} else {
						bitProgress.style.width = '0%';
					}
				}
			}
		}, 200)
	}

	window.addEventListener('envSectionShown', () => {
		currSection = 'env'
	})
	window.addEventListener('todaySectionShown', () => {
		currSection = 'today'
	})

</script>

<style>
	html {
		-webkit-font-smoothing: antialiased;
		font-smoothing: antialiased;    
		-webkit-backface-visibility: hidden; 
		backface-visibility: hidden;
		/* height: -webkit-fill-available;  */
	}
	body {
		display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}	
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>

<style is:global>
	#animation-control.white {
		#animation-play-pause-btn > #play-icon {
			background-color: #ffffff;
			mask: url(/images/play.svg) no-repeat center;
		}

		#animation-play-pause-btn > #pause-icon {
			background-color: #ffffff;
			mask: url(/images/pause.svg) no-repeat center;
		}

		.bit {
			background: #FFFFFF40;
		}
		.bit-progress {
			background: #FFFFFF75;
		}
	}

	#animation-control.gray {
		#animation-play-pause-btn > #play-icon {
			background-color: #4d4d4d;
			mask: url(/images/play.svg) no-repeat center;
		}

		#animation-play-pause-btn > #pause-icon {
			background-color: #4d4d4d;
			mask: url(/images/pause.svg) no-repeat center;
		}

		.bit {
			background: #4d4d4d65;
		}
		.bit-progress {
			background: #4d4d4d;
		}
	}

	#animation-play-pause-btn.play > #play-icon {display: block;}
	#animation-play-pause-btn.play > #pause-icon {display: none;}
	#animation-play-pause-btn.pause > #play-icon {display: none;}
	#animation-play-pause-btn.pause > #pause-icon {display: block;}

	#sroll-to-end.white #sroll-to-end-arrow {
		background-color: #ffffff;
		mask: url(/images/bottom-arrow.svg) no-repeat center;
	}

	#sroll-to-end.gray #sroll-to-end-arrow {
		background-color: #4d4d4d;
		mask: url(/images/bottom-arrow.svg) no-repeat center;
	}
	
</style>
