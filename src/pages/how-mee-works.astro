---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

---


<Layout title="Mee Foundation">
	<Header />

  <div class="w-full flex justify-center">
    <div id="phoneMain" class="overflow-hidden phoneMain p-4 z-10 fixed border-black02 border-2 rounded-2.5xl hidden h-[650px] w-[350px]">
      <div id="phoneScreens" class="transform-gpu relative h-full">
        <img id="screen7" class="phoneScreen absolute" src="/assets/phoneScreens/mee-7.png" width="318" height="618" class=""/>
        <img id="screen6" class="phoneScreen absolute" src="/assets/phoneScreens/license-6.png" width="318" height="618" class=""/>
        <img id="screen5" class="phoneScreen absolute" src="/assets/phoneScreens/billing-filled-5.png" width="318" height="618" class=""/>
        <img id="screen4" class="phoneScreen absolute" src="/assets/phoneScreens/billing-4.png" width="318" height="618" class=""/>
        <img id="screen3" class="phoneScreen absolute" src="/assets/phoneScreens/login-3.png" width="318" height="618" class=""/>
        <img id="screen2" class="phoneScreen absolute" src="/assets/phoneScreens/main-page-2.png" width="318" height="618" class=""/>
        <img id="screen1" class="phoneScreen absolute" src="/assets/phoneScreens/init-1.png" width="318" height="618" class=""/>
      </div>
    </div>
  </div>

  <main id="main" class="scrollContainer transform-gpu">
    <div class="wrapper w-screen hmw-bg">
      <article class="flex flex-col items-center">
        <section class="flex items-center flex-col">
          <h1 id="mainHeader" class="marker animate-riseIn mt-[200px] text-7xl font-bold">
            How Mee <mark>Works</mark>
          </h1>

          <div id="scrollIndicator" class="flex items-center justify-center mt-[40px] z-20 animate-fadeIn">
            <i class="scrollIcon flex relative w-4 h-6 md:w-4.5 md:h-7 py-1 md:py-2 transition-opacity ease-linear duration-100 overflow-hidden"/>
          </div>

          <div id="phone" class="phone p-4 animate-riseIn border-black02 border-2 rounded-2.5xl mt-[61px] h-[650px] w-[350px]">
            <img src="/assets/phoneScreens/init-1.png" width="318" height="618" class=""/>
          </div>
        </section>
        <section class="section mt-[891px] flex justify-start w-full ml-[72px]">
          <div>Mee is your identity agent.</div>
        </section>
        <section class="section mt-[1254px] flex justify-end w-full mr-[72px]">
          <div>Using Mee on compatible apps/sites.</div>
        </section>
        <section class="section mt-[1311px] flex justify-start w-full ml-[72px]">
          <div>Weâ€™re building a community of certified providers.</div>
        </section>
        <section class="section mt-[1474px] mb-[1300px] flex justify-end w-full mr-[72px]">
          <div>What can certified providers to with your data:</div>
        </section>
        <Footer mode="light" withAppButtons={false}/>
      </article>
    </div>
  </main>

</Layout>

<script>
const SCREEN_HEIGHT = 614

const parseMatrix = (matrix: string): string[] => {
  const matrixPattern = /^\w*\((((-?\d+)|(-?\d*\.\d+)),\s*)*((-?\d+)|(-?\d*\.\d+))\)/i;
  let matrixValue: string[] = [];
  if (matrixPattern.test(matrix)) { // When it satisfy the pattern.
      const matrixCopy = matrix.replace(/^\w*\(/, '').replace(')', '');
      matrixValue = matrixCopy.split(/\s*,\s*/);
  }
  return matrixValue
}

  const mainHeader = document.getElementById("mainHeader");
  const scrollIndicator = document.getElementById("scrollIndicator");
  const phone = document.getElementById("phone");
  const phoneMain = document.getElementById("phoneMain");
  const phoneScreens = document.getElementById("phoneScreens");
  const main = document.getElementById("main");
  const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)

	window.onbeforeunload = function () {
		window.scrollTo(0, 0);
	}
  let isFirstScrollHappen = false
  let isPhoneFixed = false

  const sections = document.querySelectorAll('.wrapper .section, .phone, .footer');
  const options: IntersectionObserverInit = {
			threshold: 0.1,
		};

  const observer = new IntersectionObserver((entries, _) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        if (entry.target.id === 'footer')
        console.log('isIntersecting', 'footer here');
      }
    })
  }, options);

  sections.forEach((section) => {
    observer.observe(section)
  });

  document.addEventListener('scroll', (e) => {
    if (!isFirstScrollHappen) {
      mainHeader?.classList.remove('animate-riseIn')
      mainHeader?.classList.add('animate-fadeOut')

      scrollIndicator?.classList.remove('animate-fadeIn')
      scrollIndicator?.classList.add('animate-fadeOut')

      isFirstScrollHappen = true
    }

    if (!isPhoneFixed) {
      const phoneRect = phone?.getBoundingClientRect()

      if (phoneRect && phone) {
        const phoneStyle = window.getComputedStyle(phone, null);
        const phoneTop = phoneRect?.top - parseInt(phoneStyle.marginTop)
        const phoneViewCenterTop = Math.round(vh / 2 - phoneRect?.height / 2)

        if (phoneTop < phoneViewCenterTop) {
          isPhoneFixed = true
          phone?.classList.add('hidden')
          phoneMain?.classList.remove('hidden')
          if (phoneMain) {
            phoneMain.style.top = String(`${phoneViewCenterTop}px`)
          }
        }
      }
    }
  })

  const screen1 = document.getElementById("screen1");
  const screen2 = document.getElementById("screen2");
  const screen3 = document.getElementById("screen3");
  const screen4 = document.getElementById("screen4");
  const screen5 = document.getElementById("screen5");
  const screen6 = document.getElementById("screen6");
  const screen7 = document.getElementById("screen7");
  const allScreens = [screen1, screen2, screen3, screen4, screen5, screen6, screen7]
  let currScreen = screen1
  let currentScreenId = 1
  let currScreenMutationObserveId = 1
  let currScreenY = -240 // first init margin from phone to view top

  const mutationObserver = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutationRecord) {
      if (currScreen) {
        const targetEl = mutationRecord.target as Element
        currScreen.style.transform = window.getComputedStyle(targetEl).transform
        const trMatrix = parseMatrix(window.getComputedStyle(targetEl).transform)

        const transformY = trMatrix[trMatrix.length - 1]

        if (currScreenMutationObserveId < currentScreenId) {
          console.log('RESET');
          currScreenY = Number(transformY)
          currScreenMutationObserveId = currentScreenId
        } else if (currScreenMutationObserveId > currentScreenId) {
          currScreenY = Number(transformY) + SCREEN_HEIGHT
          currScreenMutationObserveId = currentScreenId
        }

        const newY = Number(transformY) - currScreenY
        currScreen.style.transform = `matrix(1, 0, 0, 1, 0, ${newY})`
      }
    });
  });

  if (main) {
    mutationObserver.observe(main, { attributes : true, attributeFilter : ['style'] });
  }

  const screens = document.querySelectorAll('.phoneScreen');
  const optionsPhone: IntersectionObserverInit = {
      root: phoneScreens,
			threshold: [0, 0.1, 0.2, 0.8, 0.9, 1],
		};

  let upPreviousY = 0
  let downPreviousY = 0

  const observerPhone = new IntersectionObserver((entries, _) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting && currScreen) {
        const currentY = entry.boundingClientRect.y

        if (entry.intersectionRatio > 0 && entry.intersectionRatio < 0.2) {
          const targetId = entry.target.id.slice(-1)
          const currScreenId = currScreen.id.slice(-1)

          if (targetId === currScreenId
            && Number(targetId) < allScreens.length
            && upPreviousY
            && currentY < upPreviousY) {

            currScreen.style.transform = `matrix(1, 0, 0, 1, 0, -${SCREEN_HEIGHT})`
            currScreen = allScreens[Number(targetId)]
            currentScreenId = Number(targetId) + 1
            upPreviousY = 0
            downPreviousY = 0
          } else {
            upPreviousY = currentY
          }

        }

        if (entry.intersectionRatio > 0.8 && entry.intersectionRatio < 1) {
          const targetId = entry.target.id.slice(-1)
          const currScreenId = currScreen!.id.slice(-1)

          if (targetId === currScreenId
            && Number(targetId) > 0
            && currentY > downPreviousY
            && downPreviousY) {

            currScreen!.style.transform = `matrix(1, 0, 0, 1, 0, 0)`
            currScreen = allScreens[Number(targetId) - 2]
            currentScreenId = Number(targetId) - 1
            downPreviousY = 0
            upPreviousY = 0
          } else {
            downPreviousY = currentY
          }
        }
      }
    })
  }, optionsPhone);

  screens.forEach((section) => {
    observerPhone.observe(section)
  });
</script>

<style>
  .hmw-bg {
    background: linear-gradient(180deg, rgba(249, 182, 137, 0.4) 0%, rgba(249, 223, 137, 0.4) 28.46%, rgba(197, 192, 92, 0.4) 57.37%, rgba(79, 134, 142, 0.4) 85.38%);
  }

  .scrollIcon {
    border: 2px solid black;
	}
  .scrollIcon::after {
    background: black;
  }

</style>
