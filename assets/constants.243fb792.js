new TextEncoder;const a=new TextDecoder,d=t=>{const e=atob(t),o=new Uint8Array(e.length);for(let r=0;r<e.length;r++)o[r]=e.charCodeAt(r);return o},i=t=>{let e=t;e instanceof Uint8Array&&(e=a.decode(e)),e=e.replace(/-/g,"+").replace(/_/g,"/").replace(/\s/g,"");try{return d(e)}catch{throw new TypeError("The input to be decoded is not correctly encoded.")}};class l extends Error{static get code(){return"ERR_JOSE_GENERIC"}constructor(e){var o;super(e),this.code="ERR_JOSE_GENERIC",this.name=this.constructor.name,(o=Error.captureStackTrace)===null||o===void 0||o.call(Error,this,this.constructor)}}class c extends l{constructor(){super(...arguments),this.code="ERR_JWT_INVALID"}static get code(){return"ERR_JWT_INVALID"}}function p(t){return typeof t=="object"&&t!==null}function u(t){if(!p(t)||Object.prototype.toString.call(t)!=="[object Object]")return!1;if(Object.getPrototypeOf(t)===null)return!0;let e=t;for(;Object.getPrototypeOf(e)!==null;)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}const h=i;function y(t){if(typeof t!="string")throw new c("JWTs must use Compact JWS serialization, JWT must be a string");const{1:e,length:o}=t.split(".");if(o===5)throw new c("Only JWTs using Compact JWS serialization can be decoded");if(o!==3)throw new c("Invalid JWT");if(!e)throw new c("JWTs must contain a payload");let r;try{r=h(e)}catch{throw new c("Failed to parse the base64url encoded payload")}let n;try{n=JSON.parse(a.decode(r))}catch{throw new c("Failed to parse the decoded payload as JSON")}if(!u(n))throw new c("Invalid JWT Claims Set");return n}const f="partnerData",O="https://apps.apple.com/app/mee-identity-agent/id1673110845",g="https://play.google.com/store/apps/details?id=foundation.mee.android_client";export{O as A,g as G,f as P,y as d};
